export function startTroopManager() {
    const manager = new TroopManager();
    manager.show();
}

    class TroopManager {
        constructor(manager) {
            this.manager = manager;
            this.uw = unsafeWindow;
            this.world = window.location.host.split('.')[0];
            if (!this.world) this.world = "nl" + new Date().getFullYear().toString().slice(2);
            this.currentData = null;export function startTroopManager() {
    const manager = new TroopManager();
    manager.show();
}

    class TroopManager {
        constructor(manager) {
            this.manager = manager;
            this.uw = unsafeWindow;
            this.world = window.location.host.split('.')[0];
            if (!this.world) this.world = "nl" + new Date().getFullYear().toString().slice(2);
            this.currentData = null;

            // Configuratie
            this.CONFIG = {
                SUPABASE_URL: 'https://wmbaarvoceexltzxgcsl.supabase.co',
                SUPABASE_API_KEY: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6IndtYmFhcnZvY2VleGx0enhnY3NsIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDgwNzc4NjcsImV4cCI6MjA2MzY1Mzg2N30.O9eNhVenXaa3-K8CHC9GRHnzeruKeRaBBh7CXgU7bOw',
                UPLOAD_INTERVAL: 5 * 60 * 1000,
                TROOP_ICONS_URL: 'https://gpnl.innogamescdn.com/images/game/autogenerated/units/unit_icons_40x40_66aaef2.png'
            };

            // Troep icons
            this.troopIcons = {
                sword: '-320px 0', slinger: '-200px -280px', archer: '-40px -80px',
                hoplite: '-240px -40px', rider: '-40px -280px', chariot: '-160px -80px',
                catapult: '-120px -120px', minotaur: '-240px -240px', manticore: '0px -240px',
                zyklop: '-240px -320px', harpy: '-120px -200px', medusa: '-80px -240px',
                centaur: '-160px 0px', pegasus: '-280px -120px', cerberus: '-160px -40px',
                fury: '0px -200px', griffin: '-80px -200px', calydonian_boar: '-80px -120px',
                satyr: '-80px -280px', spartoi: '-280px -280px', ladon: '-240px -120px',
                godsent: '-40px -200px', militia: '-200px -240px',
                big_transporter: '0 -120px', bireme: '-40px -120px', attack_ship: '-120px -80px',
                demolition_ship: '-200px 0px', small_transporter: '-240px -280px',
                trireme: '-320px -200px', colonize_ship: '-40px -160px', sea_monster: '-120px -280px',
                siren: '-160px -240px'
            };

            // Vertalingen
            this.unitTranslations = {
                sword: 'Zwaardvechter',
                slinger: 'Slingeraar',
                archer: 'Boogschutter',
                hoplite: 'Hopliet',
                rider: 'Ruiter',
                chariot: 'Strijdwagen',
                catapult: 'Katapult',
                minotaur: 'Minotaurus',
                manticore: 'Manticore',
                zyklop: 'Cycloop',
                harpy: 'Harpij',
                medusa: 'Medusa',
                centaur: 'Centaur',
                pegasus: 'Pegasus',
                cerberus: 'Cerberus',
                fury: 'Erinys',
                griffin: 'Griffioen',
                calydonian_boar: 'Calydonisch varken',
                satyr: 'Sater',
                spartoi: 'Spartoi',
                ladon: 'Ladon',
                godsent: 'Godsgezant',
                militia: 'Militie',
                big_transporter: 'Transportboot',
                bireme: 'Bireem',
                attack_ship: 'Vuurschip',
                demolition_ship: 'Brander',
                small_transporter: 'Snel transportschip',
                trireme: 'Trireem',
                colonize_ship: 'Kolonisatieschip',
                sea_monster: 'Hydra',
                siren: 'Sirene'
            };

            this.setupStyles();
        }

        // Land units check
        isLandUnit(unit) {
            const landUnits = [
                'sword', 'slinger', 'archer', 'hoplite', 'rider',
                'chariot', 'catapult', 'minotaur', 'manticore',
                'zyklop', 'harpy', 'medusa', 'centaur', 'pegasus',
                'cerberus', 'fury', 'griffin', 'calydonian_boar',
                'satyr', 'spartoi', 'ladon', 'godsent', 'militia'
            ];
            return landUnits.includes(unit);
        }

        // Sea units check
        isSeaUnit(unit) {
            const seaUnits = [
                'big_transporter', 'bireme', 'attack_ship', 'demolition_ship',
                'small_transporter', 'trireme', 'colonize_ship', 'sea_monster', 'siren'
            ];
            return seaUnits.includes(unit);
        }

        async show() {
            try {
                const data = await this.fetchTroopData();
                if (!data) {
                    this.manager.showNotification("Geen troepdata gevonden.", false);
                    return;
                }
                this.displayAllDataInPopup(data);
            } catch (error) {
                console.error("Fout bij tonen troepen:", error);
                this.manager.showNotification("Fout bij tonen troepen.", false);
        }

        // Icon styling
        getUnitIconStyle(unit) {
            return `background-image: url(${this.CONFIG.TROOP_ICONS_URL}); background-position: ${this.troopIcons[unit] || '0 0'};`;
        }

        showTroopDataInNewTab(data, title = 'Troepenoverzicht') {
            const newWindow = window.open('', '_blank');
            newWindow.document.write(`
        <html>
            <head><title>${title}</title></head>
            <body>
                ${this.generateTroopDataHTML(data)}
            </body>
        </html>
    `);
            newWindow.document.close();
        }

        // Data display functions
        displayAllDataInPopup(data) {
            this.manager.toggleMainWindow();
            const popup = document.getElementById('forum-popup');
            const contentWrapper = document.createElement('div');
            contentWrapper.className = 'tm-single-column';

            const grouped = this.groupDataByPlayer(data);

            for (const playerName in grouped) {
                const playerGroup = grouped[playerName];
                const playerInfo = data.PlayerCL.find(p => p.playerName === playerName) || {};

                contentWrapper.innerHTML += `
                <div class="tm-player-block">
                    <h3>${playerName}</h3>
                    <div>Culture Level: ${playerInfo.cultureLevel || '?'}</div>
                    <div>Steden: ${playerInfo.playerVillages || playerGroup.length}</div>
                    <div>Vrije slotjes: ${playerInfo.openSlots ?? '?'}</div>
                    <hr>
                </div>
            `;

                playerGroup.forEach((entry) => {
                    const wall = entry.wall || {};
                    const home = entry.home?.units || {};
                    const away = entry.away?.units || {};
                    const support = entry.support?.units || {};

                    contentWrapper.innerHTML += `
                    <div class="tm-city-block">
                        <strong>Stad:</strong> ${wall.town || 'Onbekend'}<br>
                        Muur: ${wall.wall || 'N/A'}<br>
                        Toren: ${wall.tower ? 'Ja' : 'Nee'}<br>
                        Falanx: ${wall.phalanx ? 'Actief' : 'Inactief'}<br>
                        God: ${wall.god || 'Onbekend'}
                    </div>
                    ${this.renderTroopCategory('Aanwezige troepen', home)}
                    ${this.renderTroopCategory('Troepen buiten', away)}
                    ${this.renderTroopCategory('Ondersteunende troepen', support)}
                    ${this.renderOtherUnitsCategory(home, away, support)}
                    <hr>
                `;
                });
            }

            popup.appendChild(contentWrapper);
            document.body.appendChild(popup);
        }

        async showControlPanel() {
            const content = document.getElementById('popup-content');
            content.innerHTML = `
            <h2>Troop Manager</h2>
            <div style="display: grid; gap: 15px; margin: 20px 0;">
                <!-- Eigen data -->
                <div style="border: 1px solid #FF0000; padding: 10px; border-radius: 5px;">
                    <h3 style="color: #FF0000;">Eigen Troepen</h3>
                    <button id="show-own-data" class="troop-btn">Toon Mijn Data</button>
                    <button id="export-own-data" class="troop-btn">Exporteer Mijn Data</button>
                </div>

                <!-- Andere spelers -->
                <div style="border: 1px solid #FF0000; padding: 10px; border-radius: 5px;">
                    <h3 style="color: #FF0000;">Andere Spelers</h3>
                    <select id="player-select" style="padding: 5px; margin-bottom: 10px;">
                        <option value="">Laden...</option>
                    </select>
                    <button id="show-player-data" class="troop-btn">Toon Data</button>
                    <button id="export-all-data" class="troop-btn">Exporteer Alles</button>
                </div>
            </div>
            <div id="troop-data-container"></div>
        `;

            // Laad spelerslijst
            await this.loadPlayerDropdown();

            // Event listeners
            document.getElementById('show-own-data').addEventListener('click', async () => {
                const data = await this.fetchTroopData();
                this.currentData = data;
                this.showTroopDataInNewTab(data);
            });

            document.getElementById('export-own-data').addEventListener('click', this.exportToExcel.bind(this));

            document.getElementById('show-player-data').addEventListener('click', async () => {
                const select = document.getElementById('player-select');
                const selectedPlayer = select.value;

                if (!selectedPlayer) {
                    this.manager.showNotification("Selecteer eerst een speler", false);
                    return;
                }

                if (selectedPlayer === "-ALL-") {
                    await this.showAllPlayersData();
                } else {
                    const data = await this.fetchPlayerDataFromSupabase(selectedPlayer);
                    if (data) {
                        this.showTroopDataInNewTab(data, `${selectedPlayer}'s Troepen`);
                    } else {
                        this.manager.showNotification("Geen data gevonden voor deze speler", false);
                    }
                }
            });

            document.getElementById('export-all-data').addEventListener('click', this.exportAllData.bind(this));
        }

        async loadPlayerDropdown() {
            const select = document.getElementById('player-select');
            try {
                const players = await this.fetchAvailablePlayers();
                select.innerHTML = `
                <option value="">-- Selecteer een speler --</option>
                <option value="-ALL-">-- Toon Alles --</option>
                ${players.map(player => `
                    <option value="${player}">${player}</option>
                `).join('')}
            `;
            } catch (error) {
                console.error("Fout bij laden spelers:", error);
                select.innerHTML = `
                <option value="">Fout bij laden spelerslijst</option>
            `;
            }
        }

        async fetchAvailablePlayers() {
            try {
                const url = `${this.CONFIG.SUPABASE_URL}/rest/v1/troepen?select=player,world`;
                const response = await fetch(url, {
                    method: 'GET',
                    headers: {
                        'apikey': this.CONFIG.SUPABASE_API_KEY,
                        'Authorization': `Bearer ${this.CONFIG.SUPABASE_API_KEY}`
                    }
                });

                if (!response.ok) throw new Error(`Fout bij ophalen spelers`);
                const result = await response.json();

                return result
                    .filter(entry =>
                            (entry.world || '').trim().toLowerCase() === this.world.trim().toLowerCase()
                           )
                    .map(entry => entry.player);
            } catch (error) {
                return [];
            }
        }

        async fetchPlayerDataFromSupabase(playerName) {
            try {
                const url = `${this.CONFIG.SUPABASE_URL}/rest/v1/troepen?select=player,world,data&player=eq.${encodeURIComponent(playerName)}&world=eq.${encodeURIComponent(this.world)}`;
                const response = await fetch(url, {
                    method: 'GET',
                    headers: {
                        'apikey': this.CONFIG.SUPABASE_API_KEY,
                        'Authorization': `Bearer ${this.CONFIG.SUPABASE_API_KEY}`,
                        'Content-Type': 'application/json'
                    }
                });

                if (!response.ok) throw new Error(`Fout bij ophalen data`);
                const result = await response.json();
                return result.length > 0 ? result[0].data : null;
            } catch (error) {
                return null;
            }
        }

        async showAllPlayersData() {
            try {
                const allData = await this.fetchAllPlayersData();
                if (!allData.length) {
                    this.manager.showNotification("Geen spelerdata gevonden", false);
                    return;
                }

                const newWindow = window.open('', '_blank');
                newWindow.document.write(`
                <!DOCTYPE html>
                <html>
                <head>
                    <title>Alle Troep Data - ${new Date().toLocaleString()}</title>
                <style>
                    body { font-family: Arial, sans-serif; margin: 20px; }
                    h1 { color: #FF0000; }
                    table { border-collapse: collapse; width: 100%; margin-top: 20px; }
                    th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
                    th { background-color: #f2f2f2; }
                    tr:nth-child(even) { background-color: #f9f9f9; }
                    .unit-icon {
                        display: inline-block;
                        width: 40px;
                        height: 40px;
                        background-image: url(${this.CONFIG.TROOP_ICONS_URL});
                        position: relative;
                    }
                    .unit-count {
                        position: absolute;
                        bottom: 2px;
                        right: 2px;
                        background: rgba(0,0,0,0.7);
                        color: white;
                        padding: 2px 5px;
                        border-radius: 3px;
                        font-size: 12px;
                    }
                </style>
            </head>
            <body>
                <h1>Troep Data - Alle Spelers</h1>
                    ${allData.map(playerData => `
                        <div style="page-break-after: always;">
                            ${this.generateTroopDataHTML(playerData.data)}
                        </div>
                    `).join('')}
                </body>
                </html>
            `);
                newWindow.document.close();
            } catch (error) {
                console.error("Fout bij ophalen alle data:", error);
                this.manager.showNotification("Fout bij laden alle data", false);
            }
        }

        async fetchAllPlayersData() {
            try {
                const url = `${this.CONFIG.SUPABASE_URL}/rest/v1/troepen?select=player,world,data&world=eq.${encodeURIComponent(this.world)}`;
                const response = await fetch(url, {
                    headers: {
                        "apikey": this.CONFIG.SUPABASE_API_KEY,
                        "Authorization": `Bearer ${this.CONFIG.SUPABASE_API_KEY}`
                    }
                });

                if (!response.ok) throw new Error("Kon alle spelerdata niet ophalen");
                return await response.json();
            } catch (error) {
                return [];
            }
        }

        async exportAllData() {
            try {
                const allData = await this.fetchAllPlayersData();
                if (!allData.length) {
                    this.manager.showNotification("Geen data om te exporteren", false);
                    return;
                }

                let csvContent = 'Speler,Culture Level,Steden,Stad,Muur,Toren,Falanx,God,Unit Type,Unit,Count\n';

                allData.forEach(item => {
                    item.data.PlayerCL.forEach(player => {
                        item.data.Wall.forEach((wall, index) => {
                            const troops = item.data.Troepen[index] || { units: {} };
                            Object.entries(troops.units).forEach(([unit, count]) => {
                                csvContent += [
                                    `"${player.playerName}"`,
                                    player.cultureLevel,
                                    player.playerVillages,
                                    `"${wall?.town || 'Unknown'}"`,
                                    wall?.wall || 'N/A',
                                    wall?.tower ? 'Yes' : 'No',
                                    wall?.phalanx ? 'Yes' : 'No',
                                    `"${wall?.god || ''}"`,
                                    this.isLandUnit(unit) ? 'Land' : (this.isSeaUnit(unit) ? 'Sea' : 'Other'),
                                    `"${unit}"`,
                                    count
                                ].join(',') + '\n';
                            });
                        });
                    });
                });

                const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
                const link = document.createElement('a');
                link.href = URL.createObjectURL(blob);
                link.download = `alle_troepen_export_${new Date().toISOString().slice(0,10)}.csv`;
                link.click();
            } catch (error) {
                console.error("Export fout:", error);
                this.manager.showNotification("Export mislukt", false);
            }
        }

        generateTroopDataHTML(data) {
            const grouped = this.groupDataByPlayer(data);
            let html = '';

            for (const playerName in grouped) {
                const playerGroup = grouped[playerName];
                const playerInfo = data.PlayerCL.find(p => p.playerName === playerName) || {};

                html += `
                <div style="margin-bottom: 30px;">
                    <h2>${playerName}</h2>
                    <p>
                        <strong>Culture Level:</strong> ${playerInfo.cultureLevel || '?'} |
                        <strong>Steden:</strong> ${playerInfo.playerVillages || playerGroup.length} |
                        <strong>Vrije slotjes:</strong> ${playerInfo.openSlots ?? '?'}
                    </p>
            `;

                playerGroup.forEach((entry, index) => {
                    const wall = entry.wall || {};
                    const home = entry.home?.units || {};
                    const away = entry.away?.units || {};
                    const support = entry.support?.units || {};

                    html += `
                    <div style="margin-bottom: 20px; border: 1px solid #ddd; padding: 15px; border-radius: 5px;">
                        <h3>Stad ${index + 1}: ${wall.town || 'Onbekend'}</h3>
                        <p>
                            <strong>Muur:</strong> ${wall.wall || 'N/A'} |
                            <strong>Toren:</strong> ${wall.tower ? 'Ja' : 'Nee'} |
                            <strong>Falanx:</strong> ${wall.phalanx ? 'Actief' : 'Inactief'} |
                            <strong>God:</strong> ${wall.god || 'Onbekend'}
                        </p>

                        ${this.generateTroopCategoryHTML('Aanwezige troepen', home)}
                        ${this.generateTroopCategoryHTML('Troepen buiten', away)}
                        ${this.generateTroopCategoryHTML('Ondersteunende troepen', support)}
                        ${this.generateOtherUnitsHTML(home, away, support)}
                    </div>
                `;
                });

                html += `</div>`;
            }

            return html;
        }

        generateTroopCategoryHTML(title, units) {
            const landUnits = Object.entries(units).filter(([unit]) => this.isLandUnit(unit));
            const seaUnits = Object.entries(units).filter(([unit]) => this.isSeaUnit(unit));

            return `
            <div style="margin-bottom: 15px;">
                <h4>${title}</h4>
                ${landUnits.length > 0 ? `
                    <div style="display: flex; flex-wrap: wrap; gap: 5px; margin-bottom: 10px;">
                        ${landUnits.map(([unit, count]) => `
                            <div class="unit-icon" style="background-position: ${this.troopIcons[unit] || '0 0'}"
                                 title="${this.getUnitDescription(unit)}">
                                <div class="unit-count">${count}</div>
                            </div>
                        `).join('')}
                    </div>
                ` : '<p>Geen eenheden</p>'}

                ${seaUnits.length > 0 ? `
                    <div style="display: flex; flex-wrap: wrap; gap: 5px;">
                        ${seaUnits.map(([unit, count]) => `
                            <div class="unit-icon" style="background-position: ${this.troopIcons[unit] || '0 0'}"
                                 title="${this.getUnitDescription(unit)}">
                                <div class="unit-count">${count}</div>
                            </div>
                        `).join('')}
                    </div>
                ` : ''}
            </div>
        `;
        }

        generateOtherUnitsHTML(...unitSets) {
            const combined = Object.assign({}, ...unitSets);
            const otherUnits = Object.entries(combined)
            .filter(([unit]) => !this.isLandUnit(unit) && !this.isSeaUnit(unit))
            .filter(([_, count]) => count > 0);

            return `
            <div style="margin-bottom: 15px;">
                <h4>Andere eenheden</h4>
                <div style="padding-left: 15px;">
                    ${otherUnits.length > 0 ?
                otherUnits.map(([unit, count]) => `
                            <p>${this.getUnitName(unit)}: ${count}</p>
                        `).join('') :
            '<p>Geen andere eenheden</p>'
        }
                </div>
            </div>
        `;
        }

        renderTroopCategory(title, units) {
            const landUnits = Object.entries(units).filter(([unit]) => this.isLandUnit(unit));
            const seaUnits = Object.entries(units).filter(([unit]) => this.isSeaUnit(unit));

            return `
            <div class="tm-troop-category">
                <h4>${title}</h4>
                ${landUnits.length > 0 ? `
                    <div class="tm-units-row">
                        ${landUnits.map(([unit, count]) => this.renderUnitIcon(unit, count)).join('')}
                    </div>
                ` : ''}
                ${seaUnits.length > 0 ? `
                    <div class="tm-units-row">
                        ${seaUnits.map(([unit, count]) => this.renderUnitIcon(unit, count)).join('')}
                    </div>
                ` : ''}
            </div>
        `;
        }

        renderOtherUnitsCategory(...unitSets) {
            const combined = Object.assign({}, ...unitSets);
            const otherUnits = Object.entries(combined)
            .filter(([unit]) => !this.isLandUnit(unit) && !this.isSeaUnit(unit))
            .filter(([_, count]) => count > 0);

            return `
            <div class="tm-troop-category">
                <h4>Andere eenheden</h4>
                <div class="tm-other-list">
                    ${otherUnits.length > 0 ?
                otherUnits.map(([unit, count]) => `
                            <div class="tm-other-line">${this.getUnitName(unit)} – ${count}</div>
                        `).join('') :
            '<div class="tm-no-units">Geen eenheden</div>'
        }
                </div>
            </div>
        `;
        }

        renderUnitIcon(unit, count) {
            return `
            <div class="tm-unit" style="${this.getUnitIconStyle(unit)}" title="${this.getUnitDescription(unit)}">
                <div class="tm-unit-count">${count}</div>
            </div>
        `;
        }

        getUnitDescription(unit) {
            return this.unitTranslations[unit] || 'Geen beschrijving beschikbaar';
        }

        getUnitName(unitKey) {
            return this.unitTranslations[unitKey] || unitKey;
        }

        // Export system
        exportToExcel() {
            if (!this.currentData) {
                this.manager.showNotification('No data available to export', false);
                return;
            }

            try {
                const csvContent = this.formatCSVData(this.currentData);
                const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
                const link = document.createElement('a');
                link.href = URL.createObjectURL(blob);
                link.download = `troop_export_${new Date().toISOString().slice(0,10)}.csv`;
                link.click();
                this.manager.showNotification('Export started successfully!');
            } catch (error) {
                console.error('Export error:', error);
                this.manager.showNotification(`Export failed: ${error.message}`, false);
            }
        }

        formatCSVData(data) {
            let csv = 'Player,Culture Level,Villages,Open Slots,Town,Wall,Tower,Phalanx,God,Unit Type,Unit,Count\n';

            data.PlayerCL.forEach(player => {
                data.Wall.forEach((wall, index) => {
                    const troops = data.Troepen[index] || { units: {} };
                    Object.entries(troops.units).forEach(([unit, count]) => {
                        csv += [
                            `"${player.playerName}"`,
                            player.cultureLevel,
                            player.playerVillages,
                            player.openSlots,
                            `"${wall?.town || 'Unknown'}"`,
                            wall?.wall || 'N/A',
                            wall?.tower ? 'Yes' : 'No',
                            wall?.phalanx ? 'Yes' : 'No',
                            `"${wall?.god || ''}"`,
                            this.isLandUnit(unit) ? 'Land' : (this.isSeaUnit(unit) ? 'Sea' : 'Other'),
                            `"${unit}"`,
                            count
                        ].join(',') + '\n';
                    });
                });
            });

            return csv;
        }

        async performUpload() {
            try {
                const playerName = this.getPlayerName();
                await this.deleteOldDataFromSupabase(playerName);
                await this.uploadDataToSupabase(troopData, playerName);
                this.manager.showNotification('Upload gelukt');
            } catch (error) {
                this.manager.showNotification(`Upload faalde: ${error.message}`, false);
            }
        }

        async deleteOldDataFromSupabase(playerName) {
            try {
                const url = `${this.CONFIG.SUPABASE_URL}/rest/v1/troepen?player=eq.${encodeURIComponent(playerName)}`;
                const response = await fetch(url, {
                    method: 'DELETE',
                    headers: {
                        'apikey': this.CONFIG.SUPABASE_API_KEY,
                        'Authorization': `Bearer ${this.CONFIG.SUPABASE_API_KEY}`,
                        'Content-Type': 'application/json',
                        'Prefer': 'return=minimal' // sneller
                    }
                });

                if (!response.ok) {
                    const errorText = await response.text();
                    throw new Error(`Supabase DELETE failed: ${errorText}`);
                }

                console.log(`[SUPABASE] Oude data verwijderd voor speler: ${playerName}`);
            } catch (error) {
                console.error('Fout bij verwijderen van oude data:', error);
            }
        }


        // Voeg deze nieuwe methodes toe:
        setupAutoUpload() {
            function calculateNextUpload() {
                const now = new Date();
                const nextUpload = new Date(now);
                nextUpload.setMinutes(Math.ceil(now.getMinutes() / 5) * 5);
                nextUpload.setSeconds(0);
                nextUpload.setMilliseconds(0);
                return nextUpload - now;
            }

            const performUpload = async () => {
                try {
                    const playerName = this.getPlayerName();
                    const troopData = await this.fetchTroopData();
                    await this.uploadDataToSupabase(troopData, playerName);
                    this.manager.showNotification('Auto-upload successful!');
                } catch (error) {
                    console.error('Auto-upload error:', error);
                    this.manager.showNotification(`Upload failed: ${error.message}`, false);
                }
            };

            setTimeout(() => {
                performUpload();
                setInterval(performUpload, this.CONFIG.UPLOAD_INTERVAL);
            }, calculateNextUpload());
        }

        async uploadDataToSupabase(data, playerName) {
            try {
                const payload = {
                    player: playerName,
                    world: this.world,
                    data: data
                };

                const url = `${this.CONFIG.SUPABASE_URL}/rest/v1/troepen?on_conflict=player,world`;
                const headers = {
                    'apikey': this.CONFIG.SUPABASE_API_KEY,
                    'Authorization': `Bearer ${this.CONFIG.SUPABASE_API_KEY}`,
                    'Content-Type': 'application/json',
                    'Prefer': 'resolution=merge-duplicates,return=representation'
                };

                const response = await fetch(url, {
                    method: 'POST',
                    headers: headers,
                    body: JSON.stringify([payload])
                });

                if (!response.ok) throw new Error(`Upsert mislukt`);
            } catch (error) {}
        }

        // Data handling functions
        async fetchTroopData() {
            const playerName = this.uw.Game.player_name || "onbekend";
            const data = {
                HomeTroops: [],
                AwayTroops: [],
                SupportInCity: [],
                PlayerCL: [],
                Wall: [],
                IDs: [],
                Troepen: [],
                timestamp: new Date().toISOString()
            };

            try {
                // Get culture level
                const cldata = this.uw.TooltipFactory.getCultureOverviewTooltip()?.split('<br />') || [];
                const cl = parseInt(cldata[1]?.replace(/<b>.*?<\/b>/g, '').trim()) || 0;
                const open_slots = cl - (this.uw.Game.player_villages || 0);

                data.PlayerCL.push({
                    playerName: playerName,
                    playerVillages: this.uw.Game.player_villages || 0,
                    cultureLevel: cl,
                    openSlots: open_slots
                });

                // Get towns data
                const towns = this.uw.ITowns?.towns || {};
                for (const townId in towns) {
                    const town = towns[townId];
                    if (!town) continue;

                    data.HomeTroops.push({
                        playerName: playerName,
                        townName: town.name,
                        units: town.units?.() || {}
                    });

                    data.AwayTroops.push({
                        playerName: playerName,
                        townName: town.name,
                        units: town.unitsOuter?.() || {}
                    });

                    data.SupportInCity.push({
                        playerName: playerName,
                        townName: town.name,
                        units: town.unitsSupport?.() || {}
                    });

                    data.IDs.push({
                        town: town.name,
                        id: town.id
                    });

                    const townObj = this.uw.ITowns.getTown?.(town.id);
                    data.Wall.push({
                        player: playerName,
                        town: town.name,
                        wall: townObj?.getBuildings?.()?.attributes?.wall || 0,
                        phalanx: townObj?.getResearches?.()?.get?.("phalanx") || false,
                        tower: townObj?.getBuildings?.()?.get?.("tower") || false,
                        god: townObj?.god?.() || 'Unknown'
                    });
                }

                // Get all units
                const allUnits = this.uw.ITowns?.all_units?.fragments || {};
                for (const fragmentId in allUnits) {
                    const fragment = allUnits[fragmentId];
                    if (!fragment?.models) continue;

                    for (const modelId in fragment.models) {
                        const model = fragment.models[modelId];
                        const units = model?.attributes || {};

                        const filteredUnits = {};
                        for (const unit in units) {
                            if (typeof units[unit] === "number" && units[unit] > 0) {
                                filteredUnits[unit] = units[unit];
                            }
                        }

                        if (Object.keys(filteredUnits).length > 0) {
                            data.Troepen.push({
                                player: playerName,
                                units: filteredUnits
                            });
                        }
                    }
                }
            } catch (error) {
                console.error('Error fetching troop data:', error);
                throw error;
            }

            return data;
        }

        groupDataByPlayer(data) {
            const grouped = {};

            // Controleer of data.IDs bestaat en is een array
            const ids = data.IDs || [];
            const troops = data.Troepen || [];
            const walls = data.Wall || [];
            const homeTroops = data.HomeTroops || [];
            const awayTroops = data.AwayTroops || [];
            const supportTroops = data.SupportInCity || [];

            for (let i = 0; i < ids.length; i++) {
                const player = troops[i]?.player || 'Unknown';

                if (!grouped[player]) {
                    grouped[player] = [];
                }

                grouped[player].push({
                    wall: walls[i] || {},
                    home: homeTroops[i] || { units: {} },
                    away: awayTroops[i] || { units: {} },
                    support: supportTroops[i] || { units: {} }
                });
            }

            return grouped;
        }

        // Helper functions
        getPlayerName() {
            if (!this.uw.Game?.player_name) {
                throw new Error("Could not get player name");
            }
            return this.uw.Game.player_name.startsWith('.') ?
                this.uw.Game.player_name.substring(1) :
            this.uw.Game.player_name;
        }

        setupStyles() {
            // Wait for the DOM to be fully loaded
            if (document.readyState === 'loading') {
                document.addEventListener('DOMContentLoaded', () => this.injectStyles());
            } else {
                this.injectStyles();
            }
        }

        injectStyles() {
            const styleElement = document.createElement('style');
            styleElement.textContent = `
            .tm-grid {
                display: grid;
                gap: 20px;
                padding: 15px;
            }

            .tm-troops-col {
                width: 520px;
                flex-shrink: 0;
            }

            .tm-player-card,
            .tm-city-section,
            .tm-troop-section {
                width: 520px;
                min-height: 110px;
                background: #1dcae0;
                padding: 15px;
                border-radius: 8px;
                margin-bottom: 15px;
            }

            .tm-unit {
                font: 700 12px Verdana, Arial, Helvetica, sans-serif;
                user-select: none;
                vertical-align: middle;
                width: 39px;
                height: 40px;
                position: relative;
                display: inline-block;
                text-align: right;
                margin: 1px;
                text-shadow: 1px 1px 0 #000;
                cursor: pointer;
                box-shadow: inset 0 0 4px #000;
                background-image: url(${this.CONFIG.TROOP_ICONS_URL});
            }

            .tm-unit:hover {
                transform: scale(1.1);
                z-index: 100;
            }

            .tm-unit-count {
                position: absolute;
                bottom: 2px;
                right: 2px;
                padding: 2px 5px;
                border-radius: 3px;
                font-size: 11px;
                background-color: rgba(0,0,0,0.5);
                color: white;
            }

            .tm-units-row {
                display: flex;
                flex-wrap: wrap;
                gap: 5px;
                padding: 5px 0;
            }

            .tm-filters {
                display: flex;
                gap: 10px;
                padding: 15px;
                background: #1dcae0;
                border-radius: 8px;
                margin-bottom: 20px;
            }

            .tm-btn {
                padding: 10px 20px;
                border: none;
                border-radius: 5px;
                cursor: pointer;
                transition: all 0.3s;
                font-weight: bold;
                color: white;
            }

            .tm-btn:hover {
                opacity: 0.9;
            }

            .tm-download {
                background: #17d117;
            }

            .tm-export {
                background: #cf1717;
            }

            .tm-close {
                background: #db1a1a;
            }

            .tm-close-btn {
                position: absolute;
                top: 10px;
                right: 15px;
                font-size: 24px;
                cursor: pointer;
                color: #ffd700;
            }

            .tm-close-btn:hover {
                color: #ff0000;
            }

            .tm-troop-category {
                margin-bottom: 15px;
                padding-bottom: 10px;
                border-bottom: 1px solid #fc6;
            }

            .tm-troop-category h4 {
                margin: 0 0 10px 0;
                color: #ffd700;
            }

            .tm-other-list {
                padding: 5px 0 0 10px;
            }

            .tm-other-line {
                font-family: Verdana, sans-serif;
                font-size: 13px;
                line-height: 1.5;
                color: #ffd700;
                margin-bottom: 5px;
            }

            .tm-no-units {
                font-style: italic;
                color: #aaa;
            }

            .tm-single-column {
                display: flex;
                flex-direction: column;
                gap: 20px;
                font-family: Verdana, sans-serif;
                font-size: 13px;
                color: #ffd700;
            }

            .tm-player-block {
                padding: 15px;
                background: #1dcae0;
                border-radius: 6px;
                border: 1px solid #fc6;
            }

            .tm-city-block {
                padding: 15px;
                background: #113344;
                border-radius: 6px;
                margin-bottom: 15px;
                border: 1px solid #fc6;
            }

            #troopManagerPopup,
            #troopDataPopup {
                color: #ffd700 !important;
                font-family: Verdana, sans-serif;
            }

            .grep-notification {
                position: fixed;
                top: 20px;
                right: 20px;
                padding: 10px 20px;
                background-color: #4CAF50;
                color: white;
                border-radius: 4px;
                z-index: 10000;
                box-shadow: 0 2px 10px rgba(0,0,0,0.2);
                font-family: Arial, sans-serif;
                animation: fadeIn 0.3s;
            }

            .grep-notification.error {
                background-color: #F44336;
            }

            @keyframes fadeIn {
                from { opacity: 0; transform: translateY(-20px); }
                to { opacity: 1; transform: translateY(0); }
            }
        `;
            if (document.head) {
                document.head.appendChild(styleElement);
            } else {
                console.error('Document head not found');
            }
        }
    }
}


            // Configuratie
            this.CONFIG = {
                SUPABASE_URL: 'https://wmbaarvoceexltzxgcsl.supabase.co',
                SUPABASE_API_KEY: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6IndtYmFhcnZvY2VleGx0enhnY3NsIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDgwNzc4NjcsImV4cCI6MjA2MzY1Mzg2N30.O9eNhVenXaa3-K8CHC9GRHnzeruKeRaBBh7CXgU7bOw',
                UPLOAD_INTERVAL: 5 * 60 * 1000,
                TROOP_ICONS_URL: 'https://gpnl.innogamescdn.com/images/game/autogenerated/units/unit_icons_40x40_66aaef2.png'
            };

            // Troep icons
            this.troopIcons = {
                sword: '-320px 0', slinger: '-200px -280px', archer: '-40px -80px',
                hoplite: '-240px -40px', rider: '-40px -280px', chariot: '-160px -80px',
                catapult: '-120px -120px', minotaur: '-240px -240px', manticore: '0px -240px',
                zyklop: '-240px -320px', harpy: '-120px -200px', medusa: '-80px -240px',
                centaur: '-160px 0px', pegasus: '-280px -120px', cerberus: '-160px -40px',
                fury: '0px -200px', griffin: '-80px -200px', calydonian_boar: '-80px -120px',
                satyr: '-80px -280px', spartoi: '-280px -280px', ladon: '-240px -120px',
                godsent: '-40px -200px', militia: '-200px -240px',
                big_transporter: '0 -120px', bireme: '-40px -120px', attack_ship: '-120px -80px',
                demolition_ship: '-200px 0px', small_transporter: '-240px -280px',
                trireme: '-320px -200px', colonize_ship: '-40px -160px', sea_monster: '-120px -280px',
                siren: '-160px -240px'
            };

            // Vertalingen
            this.unitTranslations = {
                sword: 'Zwaardvechter',
                slinger: 'Slingeraar',
                archer: 'Boogschutter',
                hoplite: 'Hopliet',
                rider: 'Ruiter',
                chariot: 'Strijdwagen',
                catapult: 'Katapult',
                minotaur: 'Minotaurus',
                manticore: 'Manticore',
                zyklop: 'Cycloop',
                harpy: 'Harpij',
                medusa: 'Medusa',
                centaur: 'Centaur',
                pegasus: 'Pegasus',
                cerberus: 'Cerberus',
                fury: 'Erinys',
                griffin: 'Griffioen',
                calydonian_boar: 'Calydonisch varken',
                satyr: 'Sater',
                spartoi: 'Spartoi',
                ladon: 'Ladon',
                godsent: 'Godsgezant',
                militia: 'Militie',
                big_transporter: 'Transportboot',
                bireme: 'Bireem',
                attack_ship: 'Vuurschip',
                demolition_ship: 'Brander',
                small_transporter: 'Snel transportschip',
                trireme: 'Trireem',
                colonize_ship: 'Kolonisatieschip',
                sea_monster: 'Hydra',
                siren: 'Sirene'
            };

            this.setupStyles();
        }

        // Land units check
        isLandUnit(unit) {
            const landUnits = [
                'sword', 'slinger', 'archer', 'hoplite', 'rider',
                'chariot', 'catapult', 'minotaur', 'manticore',
                'zyklop', 'harpy', 'medusa', 'centaur', 'pegasus',
                'cerberus', 'fury', 'griffin', 'calydonian_boar',
                'satyr', 'spartoi', 'ladon', 'godsent', 'militia'
            ];
            return landUnits.includes(unit);
        }

        // Sea units check
        isSeaUnit(unit) {
            const seaUnits = [
                'big_transporter', 'bireme', 'attack_ship', 'demolition_ship',
                'small_transporter', 'trireme', 'colonize_ship', 'sea_monster', 'siren'
            ];
            return seaUnits.includes(unit);
        }

        async show() {
            try {
                const data = await this.fetchTroopData();
                if (!data) {
                    this.manager.showNotification("Geen troepdata gevonden.", false);
                    return;
                }
                this.displayAllDataInPopup(data);
            } catch (error) {
                console.error("Fout bij tonen troepen:", error);
                this.manager.showNotification("Fout bij tonen troepen.", false);
            }
        }

        // Icon styling
        getUnitIconStyle(unit) {
            return `background-image: url(${this.CONFIG.TROOP_ICONS_URL}); background-position: ${this.troopIcons[unit] || '0 0'};`;
        }

        showTroopDataInNewTab(data, title = 'Troepenoverzicht') {
            const newWindow = window.open('', '_blank');
            newWindow.document.write(`
        <html>
            <head><title>${title}</title></head>
            <body>
                ${this.generateTroopDataHTML(data)}
            </body>
        </html>
    `);
            newWindow.document.close();
        }

        // Data display functions
        displayAllDataInPopup(data) {
            this.manager.toggleMainWindow();
            const popup = document.getElementById('forum-popup');
            const contentWrapper = document.createElement('div');
            contentWrapper.className = 'tm-single-column';

            const grouped = this.groupDataByPlayer(data);

            for (const playerName in grouped) {
                const playerGroup = grouped[playerName];
                const playerInfo = data.PlayerCL.find(p => p.playerName === playerName) || {};

                contentWrapper.innerHTML += `
                <div class="tm-player-block">
                    <h3>${playerName}</h3>
                    <div>Culture Level: ${playerInfo.cultureLevel || '?'}</div>
                    <div>Steden: ${playerInfo.playerVillages || playerGroup.length}</div>
                    <div>Vrije slotjes: ${playerInfo.openSlots ?? '?'}</div>
                    <hr>
                </div>
            `;

                playerGroup.forEach((entry) => {
                    const wall = entry.wall || {};
                    const home = entry.home?.units || {};
                    const away = entry.away?.units || {};
                    const support = entry.support?.units || {};

                    contentWrapper.innerHTML += `
                    <div class="tm-city-block">
                        <strong>Stad:</strong> ${wall.town || 'Onbekend'}<br>
                        Muur: ${wall.wall || 'N/A'}<br>
                        Toren: ${wall.tower ? 'Ja' : 'Nee'}<br>
                        Falanx: ${wall.phalanx ? 'Actief' : 'Inactief'}<br>
                        God: ${wall.god || 'Onbekend'}
                    </div>
                    ${this.renderTroopCategory('Aanwezige troepen', home)}
                    ${this.renderTroopCategory('Troepen buiten', away)}
                    ${this.renderTroopCategory('Ondersteunende troepen', support)}
                    ${this.renderOtherUnitsCategory(home, away, support)}
                    <hr>
                `;
                });
            }

            popup.appendChild(contentWrapper);
            document.body.appendChild(popup);
        }

        async showControlPanel() {
            const content = document.getElementById('popup-content');
            content.innerHTML = `
            <h2>Troop Manager</h2>
            <div style="display: grid; gap: 15px; margin: 20px 0;">
                <!-- Eigen data -->
                <div style="border: 1px solid #FF0000; padding: 10px; border-radius: 5px;">
                    <h3 style="color: #FF0000;">Eigen Troepen</h3>
                    <button id="show-own-data" class="troop-btn">Toon Mijn Data</button>
                    <button id="export-own-data" class="troop-btn">Exporteer Mijn Data</button>
                </div>

                <!-- Andere spelers -->
                <div style="border: 1px solid #FF0000; padding: 10px; border-radius: 5px;">
                    <h3 style="color: #FF0000;">Andere Spelers</h3>
                    <select id="player-select" style="padding: 5px; margin-bottom: 10px;">
                        <option value="">Laden...</option>
                    </select>
                    <button id="show-player-data" class="troop-btn">Toon Data</button>
                    <button id="export-all-data" class="troop-btn">Exporteer Alles</button>
                </div>
            </div>
            <div id="troop-data-container"></div>
        `;

            // Laad spelerslijst
            await this.loadPlayerDropdown();

            // Event listeners
            document.getElementById('show-own-data').addEventListener('click', async () => {
                const data = await this.fetchTroopData();
                this.currentData = data;
                this.showTroopDataInNewTab(data);
            });

            document.getElementById('export-own-data').addEventListener('click', this.exportToExcel.bind(this));

            document.getElementById('show-player-data').addEventListener('click', async () => {
                const select = document.getElementById('player-select');
                const selectedPlayer = select.value;

                if (!selectedPlayer) {
                    this.manager.showNotification("Selecteer eerst een speler", false);
                    return;
                }

                if (selectedPlayer === "-ALL-") {
                    await this.showAllPlayersData();
                } else {
                    const data = await this.fetchPlayerDataFromSupabase(selectedPlayer);
                    if (data) {
                        this.showTroopDataInNewTab(data, `${selectedPlayer}'s Troepen`);
                    } else {
                        this.manager.showNotification("Geen data gevonden voor deze speler", false);
                    }
                }
            });

            document.getElementById('export-all-data').addEventListener('click', this.exportAllData.bind(this));
        }

        async loadPlayerDropdown() {
            const select = document.getElementById('player-select');
            try {
                const players = await this.fetchAvailablePlayers();
                select.innerHTML = `
                <option value="">-- Selecteer een speler --</option>
                <option value="-ALL-">-- Toon Alles --</option>
                ${players.map(player => `
                    <option value="${player}">${player}</option>
                `).join('')}
            `;
            } catch (error) {
                console.error("Fout bij laden spelers:", error);
                select.innerHTML = `
                <option value="">Fout bij laden spelerslijst</option>
            `;
            }
        }

        async fetchAvailablePlayers() {
            try {
                const url = `${this.CONFIG.SUPABASE_URL}/rest/v1/troepen?select=player,world`;
                const response = await fetch(url, {
                    method: 'GET',
                    headers: {
                        'apikey': this.CONFIG.SUPABASE_API_KEY,
                        'Authorization': `Bearer ${this.CONFIG.SUPABASE_API_KEY}`
                    }
                });

                if (!response.ok) throw new Error(`Fout bij ophalen spelers`);
                const result = await response.json();

                return result
                    .filter(entry =>
                            (entry.world || '').trim().toLowerCase() === this.world.trim().toLowerCase()
                           )
                    .map(entry => entry.player);
            } catch (error) {
                return [];
            }
        }

        async fetchPlayerDataFromSupabase(playerName) {
            try {
                const url = `${this.CONFIG.SUPABASE_URL}/rest/v1/troepen?select=player,world,data&player=eq.${encodeURIComponent(playerName)}&world=eq.${encodeURIComponent(this.world)}`;
                const response = await fetch(url, {
                    method: 'GET',
                    headers: {
                        'apikey': this.CONFIG.SUPABASE_API_KEY,
                        'Authorization': `Bearer ${this.CONFIG.SUPABASE_API_KEY}`,
                        'Content-Type': 'application/json'
                    }
                });

                if (!response.ok) throw new Error(`Fout bij ophalen data`);
                const result = await response.json();
                return result.length > 0 ? result[0].data : null;
            } catch (error) {
                return null;
            }
        }

        async showAllPlayersData() {
            try {
                const allData = await this.fetchAllPlayersData();
                if (!allData.length) {
                    this.manager.showNotification("Geen spelerdata gevonden", false);
                    return;
                }

                const newWindow = window.open('', '_blank');
                newWindow.document.write(`
                <!DOCTYPE html>
                <html>
                <head>
                    <title>Alle Troep Data - ${new Date().toLocaleString()}</title>
                <style>
                    body { font-family: Arial, sans-serif; margin: 20px; }
                    h1 { color: #FF0000; }
                    table { border-collapse: collapse; width: 100%; margin-top: 20px; }
                    th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
                    th { background-color: #f2f2f2; }
                    tr:nth-child(even) { background-color: #f9f9f9; }
                    .unit-icon {
                        display: inline-block;
                        width: 40px;
                        height: 40px;
                        background-image: url(${this.CONFIG.TROOP_ICONS_URL});
                        position: relative;
                    }
                    .unit-count {
                        position: absolute;
                        bottom: 2px;
                        right: 2px;
                        background: rgba(0,0,0,0.7);
                        color: white;
                        padding: 2px 5px;
                        border-radius: 3px;
                        font-size: 12px;
                    }
                </style>
            </head>
            <body>
                <h1>Troep Data - Alle Spelers</h1>
                    ${allData.map(playerData => `
                        <div style="page-break-after: always;">
                            ${this.generateTroopDataHTML(playerData.data)}
                        </div>
                    `).join('')}
                </body>
                </html>
            `);
                newWindow.document.close();
            } catch (error) {
                console.error("Fout bij ophalen alle data:", error);
                this.manager.showNotification("Fout bij laden alle data", false);
            }
        }

        async fetchAllPlayersData() {
            try {
                const url = `${this.CONFIG.SUPABASE_URL}/rest/v1/troepen?select=player,world,data&world=eq.${encodeURIComponent(this.world)}`;
                const response = await fetch(url, {
                    headers: {
                        "apikey": this.CONFIG.SUPABASE_API_KEY,
                        "Authorization": `Bearer ${this.CONFIG.SUPABASE_API_KEY}`
                    }
                });

                if (!response.ok) throw new Error("Kon alle spelerdata niet ophalen");
                return await response.json();
            } catch (error) {
                return [];
            }
        }

        async exportAllData() {
            try {
                const allData = await this.fetchAllPlayersData();
                if (!allData.length) {
                    this.manager.showNotification("Geen data om te exporteren", false);
                    return;
                }

                let csvContent = 'Speler,Culture Level,Steden,Stad,Muur,Toren,Falanx,God,Unit Type,Unit,Count\n';

                allData.forEach(item => {
                    item.data.PlayerCL.forEach(player => {
                        item.data.Wall.forEach((wall, index) => {
                            const troops = item.data.Troepen[index] || { units: {} };
                            Object.entries(troops.units).forEach(([unit, count]) => {
                                csvContent += [
                                    `"${player.playerName}"`,
                                    player.cultureLevel,
                                    player.playerVillages,
                                    `"${wall?.town || 'Unknown'}"`,
                                    wall?.wall || 'N/A',
                                    wall?.tower ? 'Yes' : 'No',
                                    wall?.phalanx ? 'Yes' : 'No',
                                    `"${wall?.god || ''}"`,
                                    this.isLandUnit(unit) ? 'Land' : (this.isSeaUnit(unit) ? 'Sea' : 'Other'),
                                    `"${unit}"`,
                                    count
                                ].join(',') + '\n';
                            });
                        });
                    });
                });

                const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
                const link = document.createElement('a');
                link.href = URL.createObjectURL(blob);
                link.download = `alle_troepen_export_${new Date().toISOString().slice(0,10)}.csv`;
                link.click();
            } catch (error) {
                console.error("Export fout:", error);
                this.manager.showNotification("Export mislukt", false);
            }
        }

        generateTroopDataHTML(data) {
            const grouped = this.groupDataByPlayer(data);
            let html = '';

            for (const playerName in grouped) {
                const playerGroup = grouped[playerName];
                const playerInfo = data.PlayerCL.find(p => p.playerName === playerName) || {};

                html += `
                <div style="margin-bottom: 30px;">
                    <h2>${playerName}</h2>
                    <p>
                        <strong>Culture Level:</strong> ${playerInfo.cultureLevel || '?'} |
                        <strong>Steden:</strong> ${playerInfo.playerVillages || playerGroup.length} |
                        <strong>Vrije slotjes:</strong> ${playerInfo.openSlots ?? '?'}
                    </p>
            `;

                playerGroup.forEach((entry, index) => {
                    const wall = entry.wall || {};
                    const home = entry.home?.units || {};
                    const away = entry.away?.units || {};
                    const support = entry.support?.units || {};

                    html += `
                    <div style="margin-bottom: 20px; border: 1px solid #ddd; padding: 15px; border-radius: 5px;">
                        <h3>Stad ${index + 1}: ${wall.town || 'Onbekend'}</h3>
                        <p>
                            <strong>Muur:</strong> ${wall.wall || 'N/A'} |
                            <strong>Toren:</strong> ${wall.tower ? 'Ja' : 'Nee'} |
                            <strong>Falanx:</strong> ${wall.phalanx ? 'Actief' : 'Inactief'} |
                            <strong>God:</strong> ${wall.god || 'Onbekend'}
                        </p>

                        ${this.generateTroopCategoryHTML('Aanwezige troepen', home)}
                        ${this.generateTroopCategoryHTML('Troepen buiten', away)}
                        ${this.generateTroopCategoryHTML('Ondersteunende troepen', support)}
                        ${this.generateOtherUnitsHTML(home, away, support)}
                    </div>
                `;
                });

                html += `</div>`;
            }

            return html;
        }

        generateTroopCategoryHTML(title, units) {
            const landUnits = Object.entries(units).filter(([unit]) => this.isLandUnit(unit));
            const seaUnits = Object.entries(units).filter(([unit]) => this.isSeaUnit(unit));

            return `
            <div style="margin-bottom: 15px;">
                <h4>${title}</h4>
                ${landUnits.length > 0 ? `
                    <div style="display: flex; flex-wrap: wrap; gap: 5px; margin-bottom: 10px;">
                        ${landUnits.map(([unit, count]) => `
                            <div class="unit-icon" style="background-position: ${this.troopIcons[unit] || '0 0'}"
                                 title="${this.getUnitDescription(unit)}">
                                <div class="unit-count">${count}</div>
                            </div>
                        `).join('')}
                    </div>
                ` : '<p>Geen eenheden</p>'}

                ${seaUnits.length > 0 ? `
                    <div style="display: flex; flex-wrap: wrap; gap: 5px;">
                        ${seaUnits.map(([unit, count]) => `
                            <div class="unit-icon" style="background-position: ${this.troopIcons[unit] || '0 0'}"
                                 title="${this.getUnitDescription(unit)}">
                                <div class="unit-count">${count}</div>
                            </div>
                        `).join('')}
                    </div>
                ` : ''}
            </div>
        `;
        }

        generateOtherUnitsHTML(...unitSets) {
            const combined = Object.assign({}, ...unitSets);
            const otherUnits = Object.entries(combined)
            .filter(([unit]) => !this.isLandUnit(unit) && !this.isSeaUnit(unit))
            .filter(([_, count]) => count > 0);

            return `
            <div style="margin-bottom: 15px;">
                <h4>Andere eenheden</h4>
                <div style="padding-left: 15px;">
                    ${otherUnits.length > 0 ?
                otherUnits.map(([unit, count]) => `
                            <p>${this.getUnitName(unit)}: ${count}</p>
                        `).join('') :
            '<p>Geen andere eenheden</p>'
        }
                </div>
            </div>
        `;
        }

        renderTroopCategory(title, units) {
            const landUnits = Object.entries(units).filter(([unit]) => this.isLandUnit(unit));
            const seaUnits = Object.entries(units).filter(([unit]) => this.isSeaUnit(unit));

            return `
            <div class="tm-troop-category">
                <h4>${title}</h4>
                ${landUnits.length > 0 ? `
                    <div class="tm-units-row">
                        ${landUnits.map(([unit, count]) => this.renderUnitIcon(unit, count)).join('')}
                    </div>
                ` : ''}
                ${seaUnits.length > 0 ? `
                    <div class="tm-units-row">
                        ${seaUnits.map(([unit, count]) => this.renderUnitIcon(unit, count)).join('')}
                    </div>
                ` : ''}
            </div>
        `;
        }

        renderOtherUnitsCategory(...unitSets) {
            const combined = Object.assign({}, ...unitSets);
            const otherUnits = Object.entries(combined)
            .filter(([unit]) => !this.isLandUnit(unit) && !this.isSeaUnit(unit))
            .filter(([_, count]) => count > 0);

            return `
            <div class="tm-troop-category">
                <h4>Andere eenheden</h4>
                <div class="tm-other-list">
                    ${otherUnits.length > 0 ?
                otherUnits.map(([unit, count]) => `
                            <div class="tm-other-line">${this.getUnitName(unit)} – ${count}</div>
                        `).join('') :
            '<div class="tm-no-units">Geen eenheden</div>'
        }
                </div>
            </div>
        `;
        }

        renderUnitIcon(unit, count) {
            return `
            <div class="tm-unit" style="${this.getUnitIconStyle(unit)}" title="${this.getUnitDescription(unit)}">
                <div class="tm-unit-count">${count}</div>
            </div>
        `;
        }

        getUnitDescription(unit) {
            return this.unitTranslations[unit] || 'Geen beschrijving beschikbaar';
        }

        getUnitName(unitKey) {
            return this.unitTranslations[unitKey] || unitKey;
        }

        // Export system
        exportToExcel() {
            if (!this.currentData) {
                this.manager.showNotification('No data available to export', false);
                return;
            }

            try {
                const csvContent = this.formatCSVData(this.currentData);
                const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
                const link = document.createElement('a');
                link.href = URL.createObjectURL(blob);
                link.download = `troop_export_${new Date().toISOString().slice(0,10)}.csv`;
                link.click();
                this.manager.showNotification('Export started successfully!');
            } catch (error) {
                console.error('Export error:', error);
                this.manager.showNotification(`Export failed: ${error.message}`, false);
            }
        }

        formatCSVData(data) {
            let csv = 'Player,Culture Level,Villages,Open Slots,Town,Wall,Tower,Phalanx,God,Unit Type,Unit,Count\n';

            data.PlayerCL.forEach(player => {
                data.Wall.forEach((wall, index) => {
                    const troops = data.Troepen[index] || { units: {} };
                    Object.entries(troops.units).forEach(([unit, count]) => {
                        csv += [
                            `"${player.playerName}"`,
                            player.cultureLevel,
                            player.playerVillages,
                            player.openSlots,
                            `"${wall?.town || 'Unknown'}"`,
                            wall?.wall || 'N/A',
                            wall?.tower ? 'Yes' : 'No',
                            wall?.phalanx ? 'Yes' : 'No',
                            `"${wall?.god || ''}"`,
                            this.isLandUnit(unit) ? 'Land' : (this.isSeaUnit(unit) ? 'Sea' : 'Other'),
                            `"${unit}"`,
                            count
                        ].join(',') + '\n';
                    });
                });
            });

            return csv;
        }

        async performUpload() {
            try {
                const playerName = this.getPlayerName();
                await this.deleteOldDataFromSupabase(playerName);
                await this.uploadDataToSupabase(troopData, playerName);
                this.manager.showNotification('Upload gelukt');
            } catch (error) {
                this.manager.showNotification(`Upload faalde: ${error.message}`, false);
            }
        }

        async deleteOldDataFromSupabase(playerName) {
            try {
                const url = `${this.CONFIG.SUPABASE_URL}/rest/v1/troepen?player=eq.${encodeURIComponent(playerName)}`;
                const response = await fetch(url, {
                    method: 'DELETE',
                    headers: {
                        'apikey': this.CONFIG.SUPABASE_API_KEY,
                        'Authorization': `Bearer ${this.CONFIG.SUPABASE_API_KEY}`,
                        'Content-Type': 'application/json',
                        'Prefer': 'return=minimal' // sneller
                    }
                });

                if (!response.ok) {
                    const errorText = await response.text();
                    throw new Error(`Supabase DELETE failed: ${errorText}`);
                }

                console.log(`[SUPABASE] Oude data verwijderd voor speler: ${playerName}`);
            } catch (error) {
                console.error('Fout bij verwijderen van oude data:', error);
            }
        }


        // Voeg deze nieuwe methodes toe:
        setupAutoUpload() {
            function calculateNextUpload() {
                const now = new Date();
                const nextUpload = new Date(now);
                nextUpload.setMinutes(Math.ceil(now.getMinutes() / 5) * 5);
                nextUpload.setSeconds(0);
                nextUpload.setMilliseconds(0);
                return nextUpload - now;
            }

            const performUpload = async () => {
                try {
                    const playerName = this.getPlayerName();
                    const troopData = await this.fetchTroopData();
                    await this.uploadDataToSupabase(troopData, playerName);
                    this.manager.showNotification('Auto-upload successful!');
                } catch (error) {
                    console.error('Auto-upload error:', error);
                    this.manager.showNotification(`Upload failed: ${error.message}`, false);
                }
            };

            setTimeout(() => {
                performUpload();
                setInterval(performUpload, this.CONFIG.UPLOAD_INTERVAL);
            }, calculateNextUpload());
        }

        async uploadDataToSupabase(data, playerName) {
            try {
                const payload = {
                    player: playerName,
                    world: this.world,
                    data: data
                };

                const url = `${this.CONFIG.SUPABASE_URL}/rest/v1/troepen?on_conflict=player,world`;
                const headers = {
                    'apikey': this.CONFIG.SUPABASE_API_KEY,
                    'Authorization': `Bearer ${this.CONFIG.SUPABASE_API_KEY}`,
                    'Content-Type': 'application/json',
                    'Prefer': 'resolution=merge-duplicates,return=representation'
                };

                const response = await fetch(url, {
                    method: 'POST',
                    headers: headers,
                    body: JSON.stringify([payload])
                });

                if (!response.ok) throw new Error(`Upsert mislukt`);
            } catch (error) {}
        }

        // Data handling functions
        async fetchTroopData() {
            const playerName = this.uw.Game.player_name || "onbekend";
            const data = {
                HomeTroops: [],
                AwayTroops: [],
                SupportInCity: [],
                PlayerCL: [],
                Wall: [],
                IDs: [],
                Troepen: [],
                timestamp: new Date().toISOString()
            };

            try {
                // Get culture level
                const cldata = this.uw.TooltipFactory.getCultureOverviewTooltip()?.split('<br />') || [];
                const cl = parseInt(cldata[1]?.replace(/<b>.*?<\/b>/g, '').trim()) || 0;
                const open_slots = cl - (this.uw.Game.player_villages || 0);

                data.PlayerCL.push({
                    playerName: playerName,
                    playerVillages: this.uw.Game.player_villages || 0,
                    cultureLevel: cl,
                    openSlots: open_slots
                });

                // Get towns data
                const towns = this.uw.ITowns?.towns || {};
                for (const townId in towns) {
                    const town = towns[townId];
                    if (!town) continue;

                    data.HomeTroops.push({
                        playerName: playerName,
                        townName: town.name,
                        units: town.units?.() || {}
                    });

                    data.AwayTroops.push({
                        playerName: playerName,
                        townName: town.name,
                        units: town.unitsOuter?.() || {}
                    });

                    data.SupportInCity.push({
                        playerName: playerName,
                        townName: town.name,
                        units: town.unitsSupport?.() || {}
                    });

                    data.IDs.push({
                        town: town.name,
                        id: town.id
                    });

                    const townObj = this.uw.ITowns.getTown?.(town.id);
                    data.Wall.push({
                        player: playerName,
                        town: town.name,
                        wall: townObj?.getBuildings?.()?.attributes?.wall || 0,
                        phalanx: townObj?.getResearches?.()?.get?.("phalanx") || false,
                        tower: townObj?.getBuildings?.()?.get?.("tower") || false,
                        god: townObj?.god?.() || 'Unknown'
                    });
                }

                // Get all units
                const allUnits = this.uw.ITowns?.all_units?.fragments || {};
                for (const fragmentId in allUnits) {
                    const fragment = allUnits[fragmentId];
                    if (!fragment?.models) continue;

                    for (const modelId in fragment.models) {
                        const model = fragment.models[modelId];
                        const units = model?.attributes || {};

                        const filteredUnits = {};
                        for (const unit in units) {
                            if (typeof units[unit] === "number" && units[unit] > 0) {
                                filteredUnits[unit] = units[unit];
                            }
                        }

                        if (Object.keys(filteredUnits).length > 0) {
                            data.Troepen.push({
                                player: playerName,
                                units: filteredUnits
                            });
                        }
                    }
                }
            } catch (error) {
                console.error('Error fetching troop data:', error);
                throw error;
            }

            return data;
        }

        groupDataByPlayer(data) {
            const grouped = {};

            // Controleer of data.IDs bestaat en is een array
            const ids = data.IDs || [];
            const troops = data.Troepen || [];
            const walls = data.Wall || [];
            const homeTroops = data.HomeTroops || [];
            const awayTroops = data.AwayTroops || [];
            const supportTroops = data.SupportInCity || [];

            for (let i = 0; i < ids.length; i++) {
                const player = troops[i]?.player || 'Unknown';

                if (!grouped[player]) {
                    grouped[player] = [];
                }

                grouped[player].push({
                    wall: walls[i] || {},
                    home: homeTroops[i] || { units: {} },
                    away: awayTroops[i] || { units: {} },
                    support: supportTroops[i] || { units: {} }
                });
            }

            return grouped;
        }

        // Helper functions
        getPlayerName() {
            if (!this.uw.Game?.player_name) {
                throw new Error("Could not get player name");
            }
            return this.uw.Game.player_name.startsWith('.') ?
                this.uw.Game.player_name.substring(1) :
            this.uw.Game.player_name;
        }

        setupStyles() {
            // Wait for the DOM to be fully loaded
            if (document.readyState === 'loading') {
                document.addEventListener('DOMContentLoaded', () => this.injectStyles());
            } else {
                this.injectStyles();
            }
        }

        injectStyles() {
            const styleElement = document.createElement('style');
            styleElement.textContent = `
            .tm-grid {
                display: grid;
                gap: 20px;
                padding: 15px;
            }

            .tm-troops-col {
                width: 520px;
                flex-shrink: 0;
            }

            .tm-player-card,
            .tm-city-section,
            .tm-troop-section {
                width: 520px;
                min-height: 110px;
                background: #1dcae0;
                padding: 15px;
                border-radius: 8px;
                margin-bottom: 15px;
            }

            .tm-unit {
                font: 700 12px Verdana, Arial, Helvetica, sans-serif;
                user-select: none;
                vertical-align: middle;
                width: 39px;
                height: 40px;
                position: relative;
                display: inline-block;
                text-align: right;
                margin: 1px;
                text-shadow: 1px 1px 0 #000;
                cursor: pointer;
                box-shadow: inset 0 0 4px #000;
                background-image: url(${this.CONFIG.TROOP_ICONS_URL});
            }

            .tm-unit:hover {
                transform: scale(1.1);
                z-index: 100;
            }

            .tm-unit-count {
                position: absolute;
                bottom: 2px;
                right: 2px;
                padding: 2px 5px;
                border-radius: 3px;
                font-size: 11px;
                background-color: rgba(0,0,0,0.5);
                color: white;
            }

            .tm-units-row {
                display: flex;
                flex-wrap: wrap;
                gap: 5px;
                padding: 5px 0;
            }

            .tm-filters {
                display: flex;
                gap: 10px;
                padding: 15px;
                background: #1dcae0;
                border-radius: 8px;
                margin-bottom: 20px;
            }

            .tm-btn {
                padding: 10px 20px;
                border: none;
                border-radius: 5px;
                cursor: pointer;
                transition: all 0.3s;
                font-weight: bold;
                color: white;
            }

            .tm-btn:hover {
                opacity: 0.9;
            }

            .tm-download {
                background: #17d117;
            }

            .tm-export {
                background: #cf1717;
            }

            .tm-close {
                background: #db1a1a;
            }

            .tm-close-btn {
                position: absolute;
                top: 10px;
                right: 15px;
                font-size: 24px;
                cursor: pointer;
                color: #ffd700;
            }

            .tm-close-btn:hover {
                color: #ff0000;
            }

            .tm-troop-category {
                margin-bottom: 15px;
                padding-bottom: 10px;
                border-bottom: 1px solid #fc6;
            }

            .tm-troop-category h4 {
                margin: 0 0 10px 0;
                color: #ffd700;
            }

            .tm-other-list {
                padding: 5px 0 0 10px;
            }

            .tm-other-line {
                font-family: Verdana, sans-serif;
                font-size: 13px;
                line-height: 1.5;
                color: #ffd700;
                margin-bottom: 5px;
            }

            .tm-no-units {
                font-style: italic;
                color: #aaa;
            }

            .tm-single-column {
                display: flex;
                flex-direction: column;
                gap: 20px;
                font-family: Verdana, sans-serif;
                font-size: 13px;
                color: #ffd700;
            }

            .tm-player-block {
                padding: 15px;
                background: #1dcae0;
                border-radius: 6px;
                border: 1px solid #fc6;
            }

            .tm-city-block {
                padding: 15px;
                background: #113344;
                border-radius: 6px;
                margin-bottom: 15px;
                border: 1px solid #fc6;
            }

            #troopManagerPopup,
            #troopDataPopup {
                color: #ffd700 !important;
                font-family: Verdana, sans-serif;
            }

            .grep-notification {
                position: fixed;
                top: 20px;
                right: 20px;
                padding: 10px 20px;
                background-color: #4CAF50;
                color: white;
                border-radius: 4px;
                z-index: 10000;
                box-shadow: 0 2px 10px rgba(0,0,0,0.2);
                font-family: Arial, sans-serif;
                animation: fadeIn 0.3s;
            }

            .grep-notification.error {
                background-color: #F44336;
            }

            @keyframes fadeIn {
                from { opacity: 0; transform: translateY(-20px); }
                to { opacity: 1; transform: translateY(0); }
            }
        `;
            if (document.head) {
                document.head.appendChild(styleElement);
            } else {
                console.error('Document head not found');
            }
        }
    }
}
